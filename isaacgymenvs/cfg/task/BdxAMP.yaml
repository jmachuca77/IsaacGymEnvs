# used to create the object
name: BdxAMP

physics_engine: ${..physics_engine}

env:
  # AMP-specific things
  # motionFile: "data/motions/bdx/bdx_forward.txt"
  motionFile: "data/motions/bdx/dataset_bdx.yaml"
  # motionFile: "data/motions/bdx/dataset_bdx_30fps.yaml"
  # End AMP-specific things
  # numEnvs: ${resolve_default:8192,${...num_envs}}
  numEnvs: 8
  envSpacing: 1. # [m]
  episodeLength_s: 8
  cameraFollow: False # if the camera follows humanoid or not
  enableDebugVis: False
  debugSaveObsActions: False

  pdControl: True
  powerScale: 1.0
  stateInit: "Random"
  # stateInit: "Default"
  hybridInitProb: 0.5
  numAMPObsSteps: 2

  localRootObs: True
  terminationHeight: 0.11
  contact_bodies: ["right_foot", "left_foot"]
  enableEarlyTermination: True

  clipObservations: 5.0
  clipActions: 1.0

  plane:
    staticFriction: 5.0 # [-]
    dynamicFriction: 5.0 # [-]
    restitution: 0. # [-]

  baseInitState:
    pos: [0.0, 0.0, 0.15] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0] # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0] # x,y,z [rad/s]

  randomCommandVelocityRanges:
    linear_x: [-0.1, 0.1] # min max [m/s]
    linear_y: [-0.05, 0.05] # min max [m/s]
    yaw: [-0.1, 0.1] # min max [rad/s]

  # randomCommandVelocityRanges:
  #   linear_x: [0.1, 0.1] # min max [m/s]
  #   linear_y: [0.1, 0.1] # min max [m/s]
  #   yaw: [0.0, 0.0] # min max [rad/s]

  control:
    # PD Drive parameters:
    stiffness: 20 # [N*m/rad] 
    damping: 1 # [N*m*s/rad]
    # stiffness: 40.0 # [N*m/rad]
    # damping: 1.0 # [N*m*s/rad]
    # Replaced manual actionScale with automatic action scale calculated from URDF
    # actionScale: 2.0
    controlFrequencyInv: 1 # 60 Hz

  defaultJointAngles: # = target angles when action = 0.0
    right_hip_yaw: -0.014 # [rad]
    right_hip_roll: 0.08 # [rad]
    right_hip_pitch: 0.53 # [rad]
    right_knee: -1.62 # [rad]
    right_ankle: 0.91 # [rad]
    left_hip_yaw: 0.013 # [rad]
    left_hip_roll: 0.077 # [rad]
    left_hip_pitch: 0.59 # [rad]
    left_knee: -1.63 # [rad]
    left_ankle: 0.86 # [rad]
    neck_pitch: -0.17 # [rad]
    head_pitch: -0.17 # [rad]
    head_yaw: 0.0 # [rad]
    left_antenna: 0.0 # [rad]
    right_antenna: 0.0 # [rad]

  urdfAsset:
    collapseFixedJoints: True
    fixBaseLink: False
    defaultDofDriveMode: 1 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)

  learn:
    # normalization
    linearVelocityScale: 2.0
    angularVelocityScale: 0.25
    dofPositionScale: 1.0
    dofVelocityScale: 0.05

    # rewards
    linearVelocityXYRewardScale: 1.0
    angularVelocityZRewardScale: 0.5
    torqueRewardScale: -0.000025

  # viewer cam:
  viewer:
    refEnv: 0
    pos: [0, 0, 0.3] # [m]
    lookat: [0.3, 0.3, 1.5] # [m]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.01667
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

task:
  push_robots: False
  push_robots_params:
    interval: 400.0 # Define how many environment steps between generating new randomizations
    max_force: 0.1
  randomize: True
  randomization_params:
    frequency: 600 # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params:
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear" # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      bdx:
        color: True
        rigid_body_properties:
          mass:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear" # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear" # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
